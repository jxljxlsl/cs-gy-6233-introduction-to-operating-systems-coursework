From 58bab4544eb675b44dae58ea9587307e95b29000 Mon Sep 17 00:00:00 2001
From: Brendan Dolan-Gavitt <brendandg@nyu.edu>
Date: Thu, 26 Mar 2020 15:46:37 -0400
Subject: [PATCH 2/6] part2: problem1 problem2

---
 Makefile  |  1 +
 date.c    | 18 ++++++++++++++++++
 syscall.c | 31 +++++++++++++++++++++++++++++--
 syscall.h |  1 +
 sysproc.c | 23 +++++++++++++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 7 files changed, 74 insertions(+), 2 deletions(-)
 create mode 100644 date.c

diff --git a/Makefile b/Makefile
index 93a1f0a..2f78b16 100644
--- a/Makefile
+++ b/Makefile
@@ -190,6 +190,7 @@ UPROGS=\
 	_example\
 	_sort\
 	_numbers\
+        _date\
 
 fs.img: mkfs README.md n.txt big_test_file.txt long_test_file.txt test_file.txt $(UPROGS)
 	./mkfs fs.img README.md n.txt big_test_file.txt long_test_file.txt test_file.txt $(UPROGS)
diff --git a/date.c b/date.c
new file mode 100644
index 0000000..76fd251
--- /dev/null
+++ b/date.c
@@ -0,0 +1,18 @@
+#include "types.h" 
+#include "user.h" 
+#include "date.h"
+
+int
+main(int argc, char *argv[])
+{
+  struct rtcdate r;
+  if (date(&r)) {
+    printf(2, "date failed\n");
+  }
+  if(r.second < 10) {
+  	printf(1, "%d-%d-%d  %d:%d:0%d\n", r.year, r.month, r.day, r.hour, r.minute, r.second);
+  } else {
+  	printf(1, "%d-%d-%d  %d:%d:%d\n", r.year, r.month, r.day, r.hour, r.minute, r.second);
+  }
+  exit();
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index 799ebc2..cd32582 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_date(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,16 +122,42 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_date]    sys_date,
+};
+
+char* syscall_name[22] =
+{
+        [SYS_fork]    "fork",
+        [SYS_exit]    "exit",
+        [SYS_wait]    "wait",
+        [SYS_pipe]    "pipe",
+        [SYS_read]    "read",
+        [SYS_kill]    "kill",
+        [SYS_exec]    "exec",
+        [SYS_fstat]   "fstat",
+        [SYS_chdir]   "chdir",
+        [SYS_dup]     "dup",
+        [SYS_getpid]  "getpid",
+        [SYS_sbrk]    "sbrk",
+        [SYS_sleep]   "sleep",
+        [SYS_uptime]  "uptime",
+        [SYS_open]    "open",
+        [SYS_write]   "write",
+        [SYS_mknod]   "mknod",
+        [SYS_unlink]  "unlink",
+        [SYS_link]    "link",
+        [SYS_mkdir]   "mkdir",
+        [SYS_close]   "close",
 };
 
 void
 syscall(void)
 {
   int num;
-
   num = proc->tf->eax;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    proc->tf->eax = syscalls[num]();
+          proc->tf->eax = syscalls[num]();
+          //cprintf("%s -> %d\n",syscall_name[num],proc->tf->eax);
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             proc->pid, proc->name, num);
diff --git a/syscall.h b/syscall.h
index bc5f356..1a620b9 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_date   22
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..beb643b 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_date(struct rtcdate *r) {
+  if (argptr(0, (void *)&r, sizeof(*r)) < 0)
+    return -1;
+  cmostime(r);
+  int  calender [] = {31,28,31,30,31,30,31,31,30,31,30,31};
+	r -> hour -= 4;
+	if(r->hour < 0){
+		r->hour += 24;
+		r->day -= 1;
+		if(r->day == 0){
+			r->month -= 1;
+			r->day = calender[r->month + 1];
+		}
+	}
+  return 0;
+}
+
+
+
+
+
+
diff --git a/user.h b/user.h
index f45b8d5..4eafb26 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int date(struct rtcdate*);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..ba76d54 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(date)
-- 
1.9.1

